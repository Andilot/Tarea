# -*- coding: utf-8 -*-
"""Practica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_B1Yk6d68_aDzCkyLGZ0mFKLs3UJfJwQ
"""

#ejemplos de entradas (la entrada a7 se considera de parentesis bien formados
#puesto que para cada parentesis abierto, hay uno cerrado a su derecha, al
#mismo tiempo que no hay caracteres no parentesis como el espacio o la letra
# "a")
prueba=["()))", ")(", "(()())(())", "(a)a", " ",
        "(  )", "", "())", "(()", "(", ")"]

#Se define la funcion
def parentesis(cadena1):
  '''Funcion que recibe cadenas de caracteres y detecta cadenas de parentesis
  bien formadas, y devuelve un bool y una respuesta impresa'''

  #Se declaran las variables y listas
  booleano=True

  #Esta sirve para detectar cuando hay parentesis
  alfabeto=['(', ')']

  #Esta servira mas adelante para detectar parentesis sin pareja
  alfabeto2=['a']

  #Esta sirve para transformar la cadena en lista, que en mi opinion es mas
  #facil de manejar
  cadena2=list(cadena1)
  h=0
  i=0
  l=0

  #Sirve para recorrer toda la lista
  longitud = len(cadena1) - 1
  while h <= longitud:

    #detecta caracteres no parentesis
    if cadena1[h] not in alfabeto:
      booleano = False
      print('no metiste solo parentesis')

      #cierra el ciclo apenas salga una "impureza" y evita que se imprima el
      #otro mensaje de error
      h = longitud + 2
    else:

      #recorre la lista
      h = h + 1
      while i <= longitud:

        #detecta un primer parentesis abierto
        if cadena2[i] == "(":

          #posicion siguiente al parentesis abierto
          j= i + 1

          #busca parentesis cerrados que completen al abierto
          while j <= longitud:
            if cadena2[j] == ")":

              #descarta de la lista la pareja encontrada guardando la pareja
              #encontrada en la lista
              cadena2[i] = "a"
              cadena2[j] = "a"

               #cierra el ciclo para buscar otro parentesis abierto y repetir
               #el proceso
              j = longitud+1
            else:

              #si no encontro un cerrado en la posicion actual, busca en la
              #siguiente
              j= j + 1

        #despues de encontrar una pareja, busca otro parentesis abierto
        i= i + 1

    #En la lista resultante verifica que cada parentesis encontro pareja
    if h == longitud+1:

      #recorre la nueva lista
      while l <= longitud:

        #detecta parejas incompletas
        if cadena2[l] not in alfabeto2:
          booleano = False
          print('hay al menos un parentesis sin pareja')

        #cierra el ciclo apenas salga una "impureza"
        l = longitud + 1
    else:
      l = l + 1

  #imprime el resultado
  if booleano:
    print('Es una cadena de parentesis bien formados \n')
  else:
    print('No es una cadena de parentesis bien formados, revise su cadena \n')
  return booleano

  #por si se requiere buscar errores o ver parte del funcionamiento:
  #print(cadena1)
  #print(cadena2)

#es la funcion que ejecuta a "parentesis" en todas las pruebas
def main():
  for i in prueba:
    parentesis(i)

#ejecuta el codigo
if __name__ == "__main__":
    main()